import numpy as np
import random

# Parâmetros do Algoritmo Genético
NUM_INDIVIDUOS = 30       
NUM_FEATURES = 45         
MAX_GERACOES = 50          
TAXA_CROSSOVER = 0.8
TAXA_MUTACAO = 0.05

# Função de Fitness
def calcular_fitness(individuo, dataset, labels):
    indices_ativos = [i for i, bit in enumerate(individuo) if bit == 1]
    if len(indices_ativos) == 0:
        return 9999
    acuracia_simulada = 0.90 + random.uniform(-0.05, 0.05)
    proporcao_usada = len(indices_ativos) / NUM_FEATURES
    penalidade = proporcao_usada * 0.5 
    fitness = 1 - acuracia_simulada + penalidade
    return fitness

# Inicialização da população
def inicializar_populacao():
    populacao = np.random.randint(0, 2, (NUM_INDIVIDUOS, NUM_FEATURES))
    return populacao

# Seleção de pais (Torneio)
def selecionar_pais(populacao, fitness):
    i1, i2 = random.sample(range(len(populacao)), 2)
    return populacao[i1] if fitness[i1] < fitness[i2] else populacao[i2]

# Crossover (Troca de genes)
def crossover(pai1, pai2):
    filho = np.array([pai1[i] if random.random() < 0.5 else pai2[i] for i in range(NUM_FEATURES)])
    return filho

# Mutação
def mutacao(individuo):
    for i in range(NUM_FEATURES):
        if random.random() < TAXA_MUTACAO:
            individuo[i] = 1 - individuo[i]
    return individuo

# Algoritmo Genético
def algoritmo_genetico(dataset, labels):
    populacao = inicializar_populacao()

    for geracao in range(MAX_GERACOES):
        fitness = np.array([calcular_fitness(ind, dataset, labels) for ind in populacao])

        nova_populacao = []
        while len(nova_populacao) < NUM_INDIVIDUOS:
            pai1 = selecionar_pais(populacao, fitness)
            pai2 = selecionar_pais(populacao, fitness)
            if random.random() < TAXA_CROSSOVER:
                filho = crossover(pai1, pai2)
            else:
                filho = np.copy(pai1)
            
            filho = mutacao(filho)
            nova_populacao.append(filho)

        populacao = np.array(nova_populacao)

    fitness_final = np.array([calcular_fitness(ind, dataset, labels) for ind in populacao])
    melhor_idx = np.argmin(fitness_final)
    melhor_individuo = populacao[melhor_idx]
    
    return melhor_individuo, fitness_final[melhor_idx]

# Execução simulada
dataset_simulado = np.random.rand(100, NUM_FEATURES)
labels_simulados = np.random.randint(0, 2, 100)

melhor_solucao, melhor_fitness = algoritmo_genetico(dataset_simulado, labels_simulados)

print("Melhor subconjunto de features:", melhor_solucao)
print("Número de features selecionadas:", sum(melhor_solucao))
print("Fitness final:", melhor_fitness)
